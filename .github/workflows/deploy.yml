name: Deploy (main) - S3 first, then EC2

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      release_sha:
        description: "SHA a desplegar (rollback)"
        required: false

concurrency:
  group: prod-deploy
  cancel-in-progress: false

# Permisos mínimos necesarios para OIDC y despliegues
permissions:
  id-token: write
  contents: read
  deployments: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Who am I? (Diagnostic)
        run: aws sts get-caller-identity

      - name: Determinar SHA
        id: picksha
        run: |
          if [ -n "${{ github.event.inputs.release_sha }}" ]; then
            echo "SHA=${{ github.event.inputs.release_sha }}" >> $GITHUB_OUTPUT
          else
            echo "SHA=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          fi

      - name: Sync frontend
        run: |
          if [ -d "front" ]; then
            aws s3 sync ./front s3://${{ vars.S3_BUCKET }}/${{ vars.S3_PREFIX }}/front --delete
          else
            echo "No hay carpeta front/, se omite"
          fi

      - name: Publicar release
        run: |
          DEST="s3://${{ vars.S3_BUCKET }}/${{ vars.S3_PREFIX }}/releases/${{ steps.picksha.outputs.SHA }}"
          aws s3 sync . "$DEST" --delete --exclude ".git/*" --exclude ".github/*"

      - name: Actualizar parámetro package_url (SSM)
        run: |
          aws ssm put-parameter \
            --name "/gsms/prod/app/package_url" \
            --type String \
            --value "s3://${{ vars.S3_BUCKET }}/${{ vars.S3_PREFIX }}/releases/${{ steps.picksha.outputs.SHA }}" \
            --overwrite

      - name: Deploy via SSM (send command)
        id: send_ssm_command
        env:
          RELEASE_URI: s3://${{ vars.S3_BUCKET }}/${{ vars.S3_PREFIX }}/releases/${{ steps.picksha.outputs.SHA }}
        run: |
          if [ -n "${{ vars.EC2_INSTANCE_IDS }}" ]; then
            TARGET="--instance-ids $(echo ${{ vars.EC2_INSTANCE_IDS }} | tr -d ' ')"
          else
            TARGET="--targets Key=tag:${{ vars.EC2_TARGET_TAG_KEY }},Values=${{ vars.EC2_TARGET_TAG_VALUE }}"
          fi
          
          # Se guarda el CommandId para el siguiente paso
          CMD_ID=$(aws ssm send-command \
            --document-name "arn:aws:ssm:us-east-1:aws:document/AWS-RunShellScript" \
            --comment "Deploy ${{ steps.picksha.outputs.SHA }}" \
            --parameters commands="['sudo bash -lc \"/usr/local/bin/deploy_from_s3.sh ${RELEASE_URI}\"']" \
            $TARGET \
            --query 'Command.CommandId' --output text)

          echo "CMD_ID=$CMD_ID" >> $GITHUB_OUTPUT
          echo "Comando enviado a SSM. CommandId: $CMD_ID"

      - name: Wait for SSM command to finish
        if: steps.send_ssm_command.outputs.CMD_ID != ''
        env:
          CMD_ID: ${{ steps.send_ssm_command.outputs.CMD_ID }}
        run: |
          set -e
          echo "Esperando invocaciones para el CommandId: $CMD_ID..."
          # Bucle para esperar a que la invocación aparezca en el API
          for i in {1..30}; do
            COUNT=$(aws ssm list-command-invocations --command-id "$CMD_ID" --query 'length(CommandInvocations)' --output text)
            [ "$COUNT" -gt 0 ] && break
            echo "Aún no hay invocaciones... esperando 5s"
            sleep 5
          done

          echo "Invocación encontrada. Esperando estado 'Success'..."
          # Bucle principal para esperar el resultado final
          for i in {1..120}; do
            # Verificar si alguna instancia falló
            BAD_STATUS=$(aws ssm list-command-invocations --command-id "$CMD_ID" --details \
              --query 'CommandInvocations[?Status==`Failed` || Status==`TimedOut` || Status==`Cancelled`]' --output json)
            if [ "$BAD_STATUS" != "[]" ]; then
              echo "Error: Una o más instancias fallaron el despliegue."
              aws ssm list-command-invocations --command-id "$CMD_ID" --details # Muestra el detalle del error
              exit 1
            fi

            # Verificar si todas las instancias han terminado con éxito
            PENDING_STATUS=$(aws ssm list-command-invocations --command-id "$CMD_ID" --details \
              --query 'CommandInvocations[?Status!=`Success`]' --output json)
            if [ "$PENDING_STATUS" = "[]" ]; then
              echo "¡Éxito! Todas las instancias completaron el despliegue."
              exit 0
            fi
            
            echo "Despliegue en progreso... esperando 5s"
            sleep 5
          done

          echo "Error: Timeout esperando el estado 'Success' después de 10 minutos."
          aws ssm list-command-invocations --command-id "$CMD_ID" --details # Muestra el último estado
          exit 1