name: Deploy Dev (per-developer)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: us-east-1
  S3_BUCKET: gsms-artifacts-727529936291-use1
  ROLE_ARN: arn:aws:iam::727529936291:role/GSMS-GitHubDevRole

defaults:
  run:
    shell: bash

jobs:
  deploy:
    if: ${{ vars.DEV_NAME != '' }}
    runs-on: ubuntu-latest
    concurrency:
      group: dev-${{ vars.DEV_NAME }}
      cancel-in-progress: false

    steps:
      # ============================================
      # 1. Contexto y Checkout
      # ============================================
      - name: 📋 Contexto del Deploy
        run: |
          echo "════════════════════════════════════════"
          echo "🚀 GSMS Dev Deploy - ${{ vars.DEV_NAME }}"
          echo "════════════════════════════════════════"
          echo "Repo   : $GITHUB_REPOSITORY"
          echo "Actor  : $GITHUB_ACTOR"
          echo "Branch : $GITHUB_REF_NAME"
          echo "Commit : $GITHUB_SHA"
          echo "Dev    : ${{ vars.DEV_NAME }}"
          echo "════════════════════════════════════════"

      - name: 📦 Checkout Code
        uses: actions/checkout@v4

      # ============================================
      # 2. Validación de Seguridad
      # ============================================
      - name: 🔒 Validar DEV_NAME vs Repo
        run: |
          DEV="${{ vars.DEV_NAME }}"
          REPO="${GITHUB_REPOSITORY}"
          
          echo "Validando DEV_NAME='$DEV' para repo '$REPO'..."
          
          case "$DEV" in
            chris)
              if [ "$REPO" != "Chr1s-117/GSMS-Proyect-develop-chris" ]; then
                echo "❌ ERROR: DEV_NAME=chris pero repo es $REPO"
                exit 78
              fi
              ;;
            laura)
              if [ "$REPO" != "LMSC2112/GSMS-Proyect-develop-laura" ]; then
                echo "❌ ERROR: DEV_NAME=laura pero repo es $REPO"
                exit 78
              fi
              ;;
            jose)
              if [ "$REPO" != "MendozaJose2001/GSMS-Proyect-develop-jose" ]; then
                echo "❌ ERROR: DEV_NAME=jose pero repo es $REPO"
                exit 78
              fi
              ;;
            *)
              echo "❌ ERROR: DEV_NAME desconocido: $DEV"
              exit 78
              ;;
          esac
          
          echo "✅ Validación de seguridad OK"

      # ============================================
      # 3. Validación de Python Backend
      # ============================================
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📚 Install Python Dependencies
        run: |
          echo "Instalando dependencias de Python..."
          pip install --upgrade pip
          pip install -r requirements.txt
          echo "✅ Dependencias instaladas"

      - name: ✅ Validate Python Syntax
        run: |
          echo "Validando sintaxis de Python..."
          python -m py_compile src/main.py
          
          # Validar Core
          for file in src/Core/*.py; do
            [ -f "$file" ] && python -m py_compile "$file"
          done
          
          # Validar Services
          for file in src/Services/*.py; do
            [ -f "$file" ] && python -m py_compile "$file"
          done
          
          # Validar Models
          for file in src/Models/*.py; do
            [ -f "$file" ] && python -m py_compile "$file"
          done
          
          echo "✅ Sintaxis de Python válida"

      - name: 🗄️ Validate Alembic Migrations
        run: |
          echo "Validando migraciones de Alembic..."
          
          # Usar DB temporal para validar
          export DATABASE_URL="sqlite:///./test.db"
          
          if alembic check 2>&1 | grep -q "No new upgrade operations detected"; then
            echo "✅ Alembic migrations OK"
          else
            echo "⚠️ WARNING: Alembic check tiene advertencias (no crítico)"
          fi

      # ============================================
      # 4. Build y Validación de Frontend Angular
      # ============================================
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: front/package-lock.json

      - name: 📦 Install Frontend Dependencies
        working-directory: front
        run: |
          echo "Instalando dependencias de Angular..."
          npm ci
          echo "✅ Dependencias instaladas"

      - name: 🏗️ Build Frontend (Production)
        working-directory: front
        run: |
          echo "Compilando frontend Angular para producción..."
          npm run build -- \
            --configuration production \
            --base-href="/dev/${{ vars.DEV_NAME }}/" \
            --output-path=dist/browser
          
          echo "✅ Frontend compilado"
          
          # Verificar que el build existe
          if [ ! -d "dist/browser" ]; then
            echo "❌ ERROR: No se encontró dist/browser"
            exit 1
          fi
          
          echo "📂 Contenido de dist/browser:"
          ls -lh dist/browser/

      # ============================================
      # 5. AWS Authentication
      # ============================================
      - name: 🔐 AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔍 Verify AWS CLI
        run: |
          aws --version
          aws sts get-caller-identity

      # ============================================
      # 6. Calcular Paths de Release
      # ============================================
      - name: 📍 Calcular Rutas de Release
        id: paths
        run: |
          SHA="${GITHUB_SHA:0:7}"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          RELEASE_ID="${TIMESTAMP}-${SHA}"
          
          PREFIX="s3://${{ env.S3_BUCKET }}/dev/${{ vars.DEV_NAME }}/releases/${RELEASE_ID}"
          
          echo "sha=$SHA" >> $GITHUB_OUTPUT
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
          echo "prefix=$PREFIX" >> $GITHUB_OUTPUT
          
          echo "════════════════════════════════════════"
          echo "📦 Release ID: $RELEASE_ID"
          echo "📂 S3 Prefix: $PREFIX"
          echo "════════════════════════════════════════"

      # ============================================
      # 7. Upload Backend a S3
      # ============================================
      - name: ⬆️ Upload Backend (src/)
        run: |
          echo "Subiendo código backend..."
          aws s3 sync src "${{ steps.paths.outputs.prefix }}/src" \
            --delete \
            --exclude "*.pyc" \
            --exclude "__pycache__/*" \
            --exclude "*.pyo"
          echo "✅ Backend subido"

      - name: ⬆️ Upload Alembic Migrations
        run: |
          if [ -d alembic ]; then
            echo "Subiendo migraciones Alembic..."
            aws s3 sync alembic "${{ steps.paths.outputs.prefix }}/alembic" --delete
            echo "✅ Alembic subido"
          fi

      - name: ⬆️ Upload Configuration Files
        run: |
          echo "Subiendo archivos de configuración..."
          
          [ -f alembic.ini ] && \
            aws s3 cp alembic.ini "${{ steps.paths.outputs.prefix }}/alembic.ini"
          
          [ -f requirements.txt ] && \
            aws s3 cp requirements.txt "${{ steps.paths.outputs.prefix }}/requirements.txt"
          
          echo "✅ Archivos de configuración subidos"

      # ============================================
      # 8. Upload Frontend Compilado a S3
      # ============================================
      - name: ⬆️ Upload Frontend (Compilado)
        run: |
          echo "Subiendo frontend compilado..."
          aws s3 sync front/dist/browser "${{ steps.paths.outputs.prefix }}/front_deploy/browser" \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "index.html"
          
          # index.html sin cache (para actualizaciones inmediatas)
          aws s3 cp front/dist/browser/index.html "${{ steps.paths.outputs.prefix }}/front_deploy/browser/index.html" \
            --cache-control "no-cache, no-store, must-revalidate"
          
          echo "✅ Frontend subido"

      # ============================================
      # 9. Upload Data (Geofences)
      # ============================================
      - name: ⬆️ Upload Data Files (Optional)
        run: |
          if [ -d data ]; then
            echo "Subiendo archivos de datos..."
            aws s3 sync data "${{ steps.paths.outputs.prefix }}/data" --delete
            echo "✅ Data subida"
          else
            echo "ℹ️  No hay carpeta data/ para subir"
          fi

      # ============================================
      # 10. Actualizar SSM Parameter (Trigger Deploy)
      # ============================================
      - name: 🔄 Update SSM Parameter
        run: |
          echo "Actualizando SSM parameter para trigger deploy..."
          
          aws ssm put-parameter \
            --name "/gsms/dev/${{ vars.DEV_NAME }}/app/package_url" \
            --value "${{ steps.paths.outputs.prefix }}" \
            --type String \
            --overwrite
          
          echo "✅ SSM actualizado: /gsms/dev/${{ vars.DEV_NAME }}/app/package_url"
          echo "   → ${{ steps.paths.outputs.prefix }}"

      # ============================================
      # 11. Resumen Final
      # ============================================
      - name: 📊 Deploy Summary
        run: |
          echo ""
          echo "════════════════════════════════════════"
          echo "✅ DEPLOY COMPLETADO"
          echo "════════════════════════════════════════"
          echo "🎯 Dev Environment: ${{ vars.DEV_NAME }}"
          echo "📦 Release ID: ${{ steps.paths.outputs.release_id }}"
          echo "📂 S3 Prefix: ${{ steps.paths.outputs.prefix }}"
          echo ""
          echo "🔗 URLs de Deploy:"
          echo "   Backend:  https://dassify.tech/dev/${{ vars.DEV_NAME }}/health"
          echo "   Frontend: https://dassify.tech/dev/${{ vars.DEV_NAME }}/"
          echo ""
          echo "📝 Siguiente paso:"
          echo "   SSH a EC2 y ejecutar:"
          echo "   sudo systemctl restart gsms-backend-dev-${{ vars.DEV_NAME }}.service"
          echo "════════════════════════════════════════"

  # ============================================
  # Job de Production (Deshabilitado en Dev Repos)
  # ============================================
  ec2_deploy_prod:
    if: false
    runs-on: ubuntu-latest
    steps:
      - run: echo "🚫 Deshabilitado en repos DEV"